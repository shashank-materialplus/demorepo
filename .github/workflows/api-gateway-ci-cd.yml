name: CI/CD Pipeline for API Gateway

on:
  # This trigger is good. It starts this workflow only after the Eureka Server workflow is successfully completed on the main branch.
  workflow_run:
    workflows: ["CI/CD Pipeline for Eureka Server"] # Make sure this name exactly matches your Eureka workflow's 'name:'
    types:
      - completed
  
  # Also allow manual triggering for debugging
  workflow_dispatch:

jobs:
  # This job checks if the triggering workflow was successful before proceeding
  check-eureka-build:
    name: Check Eureka Workflow Status
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Eureka Server workflow succeeded
        run: echo "Eureka Server CI/CD completed successfully. Proceeding with API Gateway."
  
  build-and-test:
    name: Build and Test API Gateway
    runs-on: ubuntu-latest
    # This job will only run if the check job succeeds
    needs: check-eureka-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and run tests with Maven
        # 'verify' compiles, tests, and packages the application in one step.
        run: mvn -B -f apigateway/pom.xml verify

  build-and-push-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    # This job also only runs if the triggering workflow was a success
    if: github.event.workflow_run.conclusion == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./apigateway
          file: ./apigateway/Dockerfile
          push: true
          # Define clear tags for your image
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/microservicebasedapp-apigateway:latest
            ${{ secrets.DOCKER_USERNAME }}/microservicebasedapp-apigateway:1.0.0
